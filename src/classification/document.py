"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from classification import utils
from classification.models import operations, shared
from typing import Optional

class Document:
    r"""Classify documents by type"""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def classify_document(self, request: bytes) -> operations.ClassifyDocumentResponse:
        r"""Classify document by type
        Score a document's similarity to each document type you defined in your Sensible account and to each reference document in the highest-scoring type.
        To retrieve the scores, poll the `download_link` in this endpoint's response until it returns a non-error response.
        For more information about scores, expand the 200 response in the synchronous [classification](ref:classify-document-sync) endpoint.
        
        Use this endpoint:
        
         - In an extraction workflow. For example, determine which documents to extract prior to calling a Sensible extraction endpoint.
         - Outside an extraction workflow. For example, to determine where to route each document or to label each document in a system of record.
        
        To post the document bytes, specify the non-encoded document bytes as the entire request body,and specify the `Content-Type` header, for example,\"application/pdf\" or \"image/jpeg\".
        
        This endpoint supports documents up to 4.5MB in size.
        
        For a list of supported document file types, see the [/extract](ref:extract-data-from-a-document) endpoint.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/classify/async'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, text/plain;q=0.8, text/plain;q=0.6, text/plain;q=0.4, text/plain;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClassifyDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClassifyAsyncSingleResponse])
                res.classify_async_single_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'text/plain'):
                res.bad_request = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/plain'):
                res.unauthorized = http_res.content
        elif http_res.status_code in [415, 429]:
            if utils.match_content_type(content_type, 'text/plain'):
                res.unsupported_media_type = http_res.content
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'text/plain'):
                res.sensible_encountered_an_unknown_error = http_res.content

        return res

    
    def classify_document_sync(self, request: bytes) -> operations.ClassifyDocumentSyncResponse:
        r"""Classify document by type (sync)
        **Note:** Use this Classify endpoint for testing. Use the asynchronous Classify endpoint for production.
        
        Score a document's similarity to each document type you defined in your Sensible account. Get scores for the document's similarity to document types and to their reference documents.
        
        Use this endpoint:
        
         - In an extraction workflow. For example, determine which documents to extract prior to calling a Sensible extraction endpoint.
         - Outside an extraction workflow. For example, determine where to route each document or to label each document in a system of record.
        
        To post the document bytes, specify the non-encoded document bytes as the entire request body,and specify the `Content-Type` header, for example,\"application/pdf\" or \"image/jpeg\".
        This endpoint supports documents up to 4.5MB in size.
        
        For a list of supported document file types, see the [/extract](ref:extract-data-from-a-document) endpoint.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/classify'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, text/plain;q=0.8, text/plain;q=0.6, text/plain;q=0.4, text/plain;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClassifyDocumentSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClassifySingleResponse])
                res.classify_single_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'text/plain'):
                res.bad_request = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/plain'):
                res.unauthorized = http_res.content
        elif http_res.status_code in [415, 429]:
            if utils.match_content_type(content_type, 'text/plain'):
                res.unsupported_media_type = http_res.content
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'text/plain'):
                res.sensible_encountered_an_unknown_error = http_res.content

        return res

    